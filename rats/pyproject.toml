[project]
name = "rats"
description = "bundled research analysis tools"
version = "0.6.0"
readme = "README.md"
requires-python = ">=3.10,<4.0"
authors = [
    {name = "Elon Portugaly", email = "elonp@microsoft.com"},
    {name = "Javier Zazo", email = "javierzazo@microsoft.com"},
    {name = "Lorenzo Pisani", email = "lopisani@microsoft.com"},
]
keywords = ["pipelines", "machine learning", "research"]
license = "MIT"
dependencies = []

[project.optional-dependencies]
apps = [
    "rats-apps (==0.6.0)",
]
devtools = [
    "rats-devtools (==0.6.0)",
]

[project.urls]
repository = "https://github.com/microsoft/rats"
documentation = "https://microsoft.github.io/rats"

[tool.poetry]
packages = [
    { include = "rats", from = "src/python" },
]
requires-poetry = ">=2.0"

[tool.poetry.group.local.dependencies]
# putting the local dependencies in a poetry group ensures pip never sees them
# and we can tell poetry to skip this group to test what our end users experience
rats-apps = { path = "../rats-apps", develop = true }
rats-devtools = { path = "../rats-devtools", develop = true }

[tool.poetry.group.dev.dependencies]
coverage = "*"
pyright = "*"
pytest = "*"
pytest-cov = "*"
pytest-nunit = "*"
setuptools = "*"   # pycharm requires setuptools :(
ruff = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.rats-devtools]
enabled = true

[tool.pyright]
pythonVersion = "3.10"
include = ["src/python", "test/python"]
exclude = ["**/__pycache__"]
deprecateTypingAliases = true
reportPropertyTypeMismatch = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedVariable = true
reportDuplicateImport = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportUntypedNamedTuple = true
reportConstantRedefinition = true
reportDeprecated = true
reportInconsistentConstructor = true
reportUnknownParameterType = true
reportMissingParameterType = true
reportMissingTypeArgument = true
reportUnnecessaryCast = true
reportUnnecessaryContains = true
reportImplicitStringConcatenation = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
reportShadowedImports = true

reportMissingTypeStubs = false
reportImportCycles = false
reportUnusedFunction = false
reportMissingSuperCall = false
reportPrivateUsage = false
reportUninitializedInstanceVariable = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownVariableType = false
reportUnknownMemberType = false
reportCallInDefaultInitializer = false
reportUnnecessaryIsInstance = false
reportUnnecessaryComparison = false
reportUnusedCallResult = false
reportUnusedExpression = false
reportImplicitOverride = false
reportIncompatibleVariableOverride = false
reportIncompatibleMethodOverride = false


[tool.ruff]
cache-dir = "../.tmp/rats-devtools/.ruff_cache"
include = ["src/python/**/*.py", "test/python/**/*.py", "pyproject.toml"]
line-length = 99
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["B", "D", "E", "F", "I", "Q", "W", "NPY", "PD", "PTH", "RUF", "UP"]
ignore = [
  "B026", # B026: Star-arg unpacking after a keyword argument is strongly discouraged
  "D100", # D100: Missing docstring in public module
  "D101", # D101: Missing docstring in public class
  "D102", # D102: Missing docstring in public method
  "D103", # D103: Missing docstring in public function
  "D104", # D104: Missing docstring in public package
  "D105", # D105: Missing docstring in magic method
  "D107", # D107: Missing docstring in __init__
  "D417", # D417: Missing argument descriptions in Docstrings
  "E203", # E203: Whitespace before ':'
  "E501", # E501: Line too long ({width} > {limit})
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"test/*" = ["F401"] # unused-import

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["rats", "rats_test"]

[tool.ruff.format]
quote-style = "double"            # Like Black, use double quotes for strings.
indent-style = "space"            # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = false # Like Black, respect magic trailing commas.
line-ending = "auto"              # Like Black, automatically detect the appropriate line ending.

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

[tool.coverage.run]
branch = true
data_file = "../.tmp/rats-devtools/.coverage"
# Root namespace package folder here ensures coverage will include files with 0% coverage
source = ["src/python/rats"]
relative_files = true

[tool.coverage.report]
show_missing = true

[tool.coverage.xml]
output = "../.tmp/rats-devtools/reports/coverage.xml"

[tool.pytest.ini_options]
cache_dir = "../.tmp/rats-devtools/.pytest_cache"
testpaths = ["test/python"]
addopts = """
    --cov --cov-report=term
    --cov-report=xml
    --junit-xml ../.tmp/rats-devtools/reports/pytest-junit.xml
    --capture=no
    --cache-clear
"""
