[tool.poetry]
name = "rats-examples-minimal"
description = "Rats Development Tools"
version = "0.1.3"
readme = "README.md"
authors = []
packages = [
    { include = "rats/examples", from = "src/python" },
]
repository = "https://github.com/microsoft/rats/"
documentation = "https://microsoft.github.io/rats/"
keywords = ["pipelines", "machine learning", "research"]
license = "MIT"

[tool.poetry-monorepo-dependency-plugin]
enable = true
version-pinning-strategy = "semver"

[tool.poetry.dependencies]
python = "^3.10"
rats-apps = { path = "../rats-apps", develop = true }

[tool.poetry.group.dev.dependencies]
coverage = "*"
pyright = "*"
pytest = "*"
pytest-cov = "*"
pytest-nunit = "*"
setuptools = "*"   # pycharm requires setuptools :(
ruff = "*"
twine = "*"        # to release packages to hflabs

[tool.poetry.group.docs.dependencies]
sphinx = "*"
sphinx-autodoc-typehints = "*"
sphinx-markdown-builder = "*"

[tool.poetry.scripts]

[tool.poetry.plugins."rats.examples"]
"rats-examples-minimal" = "rats.examples._plugin:PluginContainer"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.rats-examples-minimal]
ci-stages = [
    "build-image",
]

[tool.pyright]
pythonVersion = "3.10"
include = ["src/python", "test/python"]
exclude = ["**/__pycache__"]
deprecateTypingAliases = true
reportPropertyTypeMismatch = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedVariable = true
reportDuplicateImport = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportUntypedNamedTuple = true
reportConstantRedefinition = true
reportDeprecated = true
reportInconsistentConstructor = true
reportUnknownParameterType = true
reportMissingParameterType = true
reportMissingTypeArgument = true
reportUnnecessaryCast = true
reportUnnecessaryContains = true
reportImplicitStringConcatenation = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
reportShadowedImports = true

reportMissingTypeStubs = false
reportImportCycles = false
reportUnusedFunction = false
reportMissingSuperCall = false
reportPrivateUsage = false
reportUninitializedInstanceVariable = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownVariableType = false
reportUnknownMemberType = false
reportCallInDefaultInitializer = false
reportUnnecessaryIsInstance = false
reportUnnecessaryComparison = false
reportUnusedCallResult = false
reportUnusedExpression = false
reportImplicitOverride = false
reportIncompatibleVariableOverride = false
reportIncompatibleMethodOverride = false

[tool.ruff]
cache-dir = ".tmp/.ruff_cache"
include = ["src/python/**/*.py", "test/python/**/*.py", "pyproject.toml"]
fix = true
show-fixes = true
output-format = "full"
namespace-packages = ["rats"]
line-length = 99
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
    "B",    # Bugbear
    "D",    # Docstring
    "E",    # Pycodestyle
    "F",    # Pyflakes
    "I",    # Import
    "Q",    # Quotes
    "W",    # PEP8 warnings
    "NPY",  # Numpy
    "PD",   # Pydocstyle
    "PTH",  # Path
    "RUF",  # Ruff
    "UP",   # Unittest
    "D213", # D213: Multi-line docstring summary should start at the second line
]
ignore = [
    "D212", # D212: Multi-line docstring summary should start at the second line
    # This rule seems buggy: https://github.com/astral-sh/ruff/issues/2480
    "PD011", # PD011: Use `.to_numpy()` instead of `.values`
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"test/*" = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["rats", "rats_test"]

[tool.ruff.format]
quote-style = "double"            # Like Black, use double quotes for strings.
indent-style = "space"            # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = false # Like Black, respect magic trailing commas.
line-ending = "auto"              # Like Black, automatically detect the appropriate line ending.

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

[tool.coverage.run]
branch = true
data_file = ".tmp/.coverage"
# Root namespace package folder here ensures coverage will include files with 0% coverage
source = ["src/python/rats"]
relative_files = true

[tool.coverage.report]
show_missing = true

[tool.coverage.xml]
output = ".tmp/reports/coverage.xml"

[tool.pytest.ini_options]
cache_dir = ".tmp/.pytest_cache"
testpaths = ["test/python"]
addopts = """
    --cov --cov-report=term
    --cov-report=xml
    --junit-xml .tmp/reports/pytest-junit.xml
    --capture=no
    --cache-clear
"""
