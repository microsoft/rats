# THIS FILE WAS GENERATED BY IMMUNODATA PLATFORM LIBRARIES.
# EDIT WITH CAUTION!

steps:
- task: PythonScript@0
  displayName: "Validate submodules"
  inputs:
    scriptSource: 'inline'
    script: |
        """Module for validating submodules that all submodules are at a valid tag and are clean."""

        import re
        import sys
        from subprocess import check_output

        _SUBMODULE_STATUS_COMMAND = ["git", "submodule", "status", "--recursive"]


        class SubmoduleStatus:
            submodule: str
            is_dirty: bool
            hash: str
            branch_or_tag: str


        def _parse_submodule_status_line(line: str) -> SubmoduleStatus:
            status = SubmoduleStatus()
            line = line.strip()
            if line.startswith("-") or line.startswith("+"):
                status.is_dirty = True
                line = line[1:]
            else:
                status.is_dirty = False
            line = line.strip()
            tokens = line.split()
            status.hash = tokens[0]
            status.submodule = tokens[1]
            if not tokens[2].startswith("(") or not tokens[2].endswith(")"):
                raise ValueError(
                    f"Unexpected submodule status line: {line}.  The last token should be in "
                    "parentheses."
                )
            status.branch_or_tag = tokens[2][1:-1]
            return status


        def _get_submodule_statuses() -> list[SubmoduleStatus]:
            output = check_output(_SUBMODULE_STATUS_COMMAND, text=True).strip()
            lines = [l for l in output.split("\n") if l]
            return [_parse_submodule_status_line(line) for line in lines]


        def is_valid_tag(tag: str) -> bool:
            """Check if a tag is a valid version tag, i.e starts with a v followed by 1 or more integers
            separated by dots.
            """
            pattern = "v([0-9]+)(\\.([0-9]+))*"
            m = re.fullmatch(pattern, tag)
            return m is not None


        def check_submodule_is_at_tag_and_not_dirty(submodule_status: SubmoduleStatus) -> bool:
            return not submodule_status.is_dirty and is_valid_tag(
                submodule_status.branch_or_tag
            )


        def validate_submodule(submodule_status: SubmoduleStatus) -> bool:
            return check_submodule_is_at_tag_and_not_dirty(submodule_status)


        def validate_all_submodules() -> bool:
            """Validate all submodules.

            Write an error message to stderr for each submodule that fails validation.

            Returns:
                True if all submodules are valid, False otherwise.
            """
            statuses = _get_submodule_statuses()
            is_valid = True
            for status in statuses:
                if validate_submodule(status):
                    print(
                        f"Submodule {status.submodule} is at a valid tag and is clean.",
                    )
                else:
                    is_valid = False
                    print(
                        f"Submodule {status.submodule} is not at a valid tag or is not clean.",
                        file=sys.stderr,
                    )
            return is_valid


        if __name__ == "__main__":
            if validate_all_submodules():
                sys.exit(0)
            else:
                sys.exit(1)
