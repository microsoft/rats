# THIS FILE WAS GENERATED BY IMMUNODATA PLATFORM LIBRARIES.
# EDIT WITH CAUTION!

parameters:
  - name: appBuilderImageName
    type: string
  - name: appBuilderImageTag
    type: string
  - name: isDevBuild
    type: boolean
  - name: subscription
    type: string
    default: "Immunomics R&D (7bd3802d-452e-4b2a-964e-e2c996bc7477)"
  - name: driverComponent
    type: string
    values:
    - oneml-devtools
    - oneml-habitats
    - oneml-pipelines
    - oneml-processors

jobs:
- job:
  displayName: "Documentation"
  pool:
    vmImage: "ubuntu-latest"

  steps:
  - checkout: self
    submodules: true
  - script: |
      mkdir -p .tmp/artifacts
    displayName: "Artifacts Directory"

  - template: /.azure-pipelines/templates/steps.authenticate.yaml

  - template: /.azure-pipelines/templates/steps.define-build-variables.yaml
    parameters:
      appBuilderImageName: ${{ parameters.appBuilderImageName }}
      appBuilderImageTag: ${{ parameters.appBuilderImageTag }}
      component: ${{ parameters.driverComponent }}
      isDevBuild: ${{ parameters.isDevBuild }}

  - task: AzureCLI@2
    inputs:
      azureSubscription: '${{ parameters.subscription }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      useGlobalConfig: true
      inlineScript: |
        # -x makes the pipeline output every line below!
        # Don't leave this flag if you touch secrets!
        set -euxo pipefail

        # install tekton
        TEKTON_VERSION="0.25.0"
        TEKTON_FILENAME="tektoncd-cli-${TEKTON_VERSION}_Linux-64bit.deb"
        TEKTON_SHA256="f953080cfc2db9e95e903c716d76e0c9e2eef047a425ef79c5826aad5c2e4792"

        curl -LO https://github.com/tektoncd/cli/releases/download/v${TEKTON_VERSION}/$TEKTON_FILENAME
        echo "$TEKTON_SHA256  $TEKTON_FILENAME" | sha256sum --check -
        sudo dpkg -i ./$TEKTON_FILENAME
        rm -f $TEKTON_FILENAME

        JOB_ID=$(uuidgen)
        CONTEXT_IMAGE="immunodata.azurecr.io/oneml.build-context:$BUILD_VERSION"

        # build context image
        docker build -f Dockerfile.build-context -t $CONTEXT_IMAGE .
        docker push $CONTEXT_IMAGE

        if [ "${{ parameters.isDevBuild }}" = "True" ]; then
            HELM_FLAGS="--custom-release-namespace pr-$(System.PullRequest.PullRequestId)"
        fi
        if [ "${{ parameters.isDevBuild }}" = "False" ]; then
            HELM_FLAGS="--release"
        fi

        # kubelogin
        KUBELOGIN_VERSION="v0.0.30"
        KUBERNETES_CLUSTER="immunodata-v2"
        RESOURCE_GROUP="immunodata.aks"

        set -eux && sudo apt-get update && sudo apt-get install wget && sudo apt-get install unzip && \
        sudo wget https://github.com/Azure/kubelogin/releases/download/${KUBELOGIN_VERSION}/kubelogin-linux-amd64.zip && \
        sudo unzip -j kubelogin-linux-amd64.zip "bin/linux_amd64/kubelogin" -d "/usr/local/bin" && \
        sudo rm kubelogin-linux-amd64.zip

        az aks get-credentials --resource-group $RESOURCE_GROUP --name $KUBERNETES_CLUSTER
        kubelogin convert-kubeconfig -l azurecli
   
        # run tekton
        tkn pipeline start \
            --namespace ci-builds \
            --filename .tekton/pipelines/docs-deploy.yaml \
            --labels job-id=$JOB_ID,aadpodidbinding=tekton-pipeline \
            --showlog \
            --serviceaccount tekton-pipeline \
            --pod-template .tekton/pod-templates/cicd-nodepool.yaml \
            --workspace name=code,volumeClaimTemplateFile=.tekton/volume-claim-templates/pvc-template.yaml \
            -p "user=azure-devops@managed-identity" \
            -p "docker-image-build-context=$CONTEXT_IMAGE" \
            -p "docker-image-app-builder=${{ parameters.appBuilderImageName }}:${{ parameters.appBuilderImageTag }}" \
            -p "driver-component=${{ parameters.driverComponent }}" \
            -p "version=$BUILD_VERSION" \
            -p "helm-flags=$HELM_FLAGS"
        
        # ensure the job is actually done (Succeeded or Failed or Cancelled), then
        # ensure devops task return code matches whether the tekton task succeeded or failed
        # the `tkn task start` command above will exit with a `0` even when the task fails
        # we use grep here to cause this step to fail if we aren't able to find a succeeded task
        status=$(tkn pipelinerun list -n ci-builds --label job-id=$JOB_ID)
        while [ ! -z "$(echo $status | grep -E -v 'Failed|Succeeded|Cancelled' || echo '')" ];
        do
          echo $status
          # 'tkn pipelinerun list' takes long enough to run that sleep would be overkill
          status=$(tkn pipelinerun list -n ci-builds --label job-id=$JOB_ID)
        done
        echo $status
        echo $status | grep Succeeded
    displayName: 'Tekton: docs-deploy'
