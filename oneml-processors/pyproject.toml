[tool.poetry]
name = "oneml-processors"
# Handled by `poetry-dynamic-versioning` plugin below.
version = "0.0.0"
description = ""
readme = "README.md"
authors = []
packages = [{ include = "oneml", from = "src/python" }]

[[tool.poetry.source]]
name = "oneml-artifacts"
url = "https://pkgs.dev.azure.com/health-futures-lab/labs/_packaging/oneml/pypi/simple"
priority = "default"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
bump = true
dirty = false
# This would allow us to publish from PR builds but Azure Devops artifacts lack support:
# https://developercommunity.visualstudio.com/t/local-version-segments-for-python-package-feeds/892057
metadata = false

[tool.poetry.dependencies]
dill = "^0.3.5"
hydra-core = "^1.3.2"
hydra-zen = "*"
omegaconf = "*"
oneml-pipelines = "*"
pydot = "^1.4.2"
python = ">=3.8.10,<3.11"
furl = "^2.1.3"

[tool.poetry.group.dev.dependencies]
oneml-pipelines = { path = "../oneml-pipelines/", develop = true }
coverage = "*"
pyright = "*"
pytest = "*"
pytest-cov = "*"
pytest-nunit = "*"
ruff = "*"

[tool.poetry.group.docs.dependencies]
sphinx = "*"
sphinx-autodoc-typehints = "*"
sphinx-markdown-builder = "*"

[tool.poetry.plugins."oneml.app_plugins"]
"oneml.processors-plugin" = "oneml.processors.plugin:OnemlProcessorsPlugin"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
pythonVersion = "3.10"
include = ["src/python", "test/python"]
exclude = ["**/__pycache__"]
deprecateTypingAliases = true
reportPropertyTypeMismatch = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedVariable = true
reportDuplicateImport = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportUntypedNamedTuple = true
reportConstantRedefinition = true
reportDeprecated = true
reportInconsistentConstructor = true
reportUnknownParameterType = true
reportMissingParameterType = true
reportMissingTypeArgument = true
reportUnnecessaryCast = true
reportUnnecessaryContains = true
reportImplicitStringConcatenation = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
reportShadowedImports = true

reportMissingTypeStubs = false
reportImportCycles = false
reportUnusedFunction = false
reportMissingSuperCall = false
reportPrivateUsage = false
reportUninitializedInstanceVariable = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownVariableType = false
reportUnknownMemberType = false
reportCallInDefaultInitializer = false
reportUnnecessaryIsInstance = false
reportUnnecessaryComparison = false
reportUnusedCallResult = false
reportUnusedExpression = false
reportImplicitOverride = false
reportIncompatibleVariableOverride = false
reportIncompatibleMethodOverride = false


[tool.ruff]
cache-dir = "../.tmp/oneml-processors/.ruff_cache"
include = ["src/python/**/*.py", "test/python/**/*.py", "pyproject.toml"]
line-length = 99
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["B", "D", "E", "F", "I", "Q", "W", "NPY", "PD", "PTH", "RUF", "UP"]
ignore = [
    "B026", # B026: Star-arg unpacking after a keyword argument is strongly discouraged
    "D100", # D100: Missing docstring in public module
    "D101", # D101: Missing docstring in public class
    "D102", # D102: Missing docstring in public method
    "D103", # D103: Missing docstring in public function
    "D104", # D104: Missing docstring in public package
    "D105", # D105: Missing docstring in magic method
    "D107", # D107: Missing docstring in __init__
    "D417", # D417: Missing argument descriptions in Docstrings
    "E203", # E203: Whitespace before ':'
    "E501", # E501: Line too long ({width} > {limit})
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.per-file-ignores]
"test/*" = ["F401"] # unused-import

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["oneml", "oneml_test"]

[tool.ruff.format]
quote-style = "double"            # Like Black, use double quotes for strings.
indent-style = "space"            # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = false # Like Black, respect magic trailing commas.
line-ending = "auto"              # Like Black, automatically detect the appropriate line ending.

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

[tool.coverage.run]
branch = true
data_file = "../.tmp/oneml-processors/.coverage"
# Root namespace package folder here ensures coverage will include files with 0% coverage
source = ["src/python/oneml"]
relative_files = true

[tool.coverage.report]
show_missing = true

[tool.coverage.xml]
output = "../.tmp/oneml-processors/reports/coverage.xml"

[tool.pytest.ini_options]
cache_dir = "../.tmp/oneml-processors/.pytest_cache"
testpaths = ["test/python"]
addopts = """
    --cov --cov-report=term
    --cov-report=xml
    --junit-xml ../.tmp/oneml-processors/reports/pytest-junit.xml
    --capture=no
    --cache-clear
"""
