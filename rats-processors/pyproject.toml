[tool.poetry]
name = "rats-processors"
description = "Rats Processors"
# Handled by `poetry-dynamic-versioning` plugin below.
version = "0.0.0"
readme = "README.md"
authors = []
packages = [{ include = "rats", from = "src/python" }]

[[tool.poetry.source]]
name = "oneml-artifacts"
url = "https://pkgs.dev.azure.com/health-futures-lab/labs/_packaging/oneml/pypi/simple"
priority = "primary"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
bump = true
dirty = false
# This would allow us to publish from PR builds but Azure Devops artifacts lack support:
# https://developercommunity.visualstudio.com/t/local-version-segments-for-python-package-feeds/892057
metadata = false

[tool.poetry.dependencies]
dill = "^0.3.5"
hydra-core = "^1.3.2"
hydra-zen = "*"
omegaconf = "*"
rats-pipelines = "*"
pydot = "^1.4.2"
python = ">=3.8.10,<3.11"
furl = "^2.1.3"

[tool.poetry.group.dev.dependencies]
rats-pipelines = { path = "../rats-pipelines/", develop = true }
coverage = "*"
pyright = "*"
pytest = "*"
pytest-cov = "*"
pytest-nunit = "*"
ruff = "*"

[tool.poetry.group.docs.dependencies]
sphinx = "*"
sphinx-autodoc-typehints = "*"
sphinx-markdown-builder = "*"

[tool.poetry.plugins."rats.app_plugins"]
"rats.processors-plugin" = "rats.processors.plugin:RatsProcessorsPlugin"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
pythonVersion = "3.10"
include = ["src/python", "test/python"]
exclude = ["**/__pycache__"]

strictListInference = true
strictDictionaryInference = true
strictSetInference = true

deprecateTypingAliases = true
reportPropertyTypeMismatch = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedVariable = true
reportDuplicateImport = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportUntypedNamedTuple = true
reportConstantRedefinition = true
reportDeprecated = true
reportInconsistentConstructor = true
reportUnknownParameterType = true
reportMissingParameterType = true
reportMissingTypeArgument = true
reportUnnecessaryCast = true
reportUnnecessaryContains = true
reportImplicitStringConcatenation = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
reportShadowedImports = true

reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedFunction = false
reportMissingSuperCall = false
reportPrivateUsage = true
reportUninitializedInstanceVariable = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownVariableType = true
reportUnknownMemberType = true
reportCallInDefaultInitializer = true
reportUnnecessaryIsInstance = true
reportUnnecessaryComparison = true
reportUnusedCallResult = false
reportUnusedExpression = true
reportImplicitOverride = false
reportIncompatibleVariableOverride = true
reportIncompatibleMethodOverride = true


[tool.ruff]
cache-dir = "../.tmp/rats-processors/.ruff_cache"
include = ["src/python/**/*.py", "test/python/**/*.py", "pyproject.toml"]
line-length = 99
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
    "B", # Bugbear
    "D", # Docstring
    "E", # Pycodestyle
    "F", # Pyflakes
    "I", # Import
    "Q", # Quotes
    "W", # PEP8 warnings
    "NPY", # Numpy
    "PD", # Pydocstyle
    "PTH", # Path
    "RUF", # Ruff
    "UP", # Unittest
    "D213", # D213: Multi-line docstring summary should start at the second line
]
ignore = [
    "E501", # E501: Line too long ({width} > {limit})
    "D212", # D212: Multi-line docstring summary should start at the second line
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Enable preview features.
preview = true

# Only ignore variables named "_".
dummy-variable-rgx = "^_$"

[tool.ruff.lint.per-file-ignores]
# Our tests don't need to document things as much as other public APIs.
"test/python/**/*.py" = [
    "D100", # D100: Missing docstring in public module
    "D101", # D101: Missing docstring in public class
    "D102", # D102: Missing docstring in public method
    "D103", # D103: Missing docstring in public function
    "D104", # D104: Missing docstring in public package
    "F401", # F401: '...' imported but unused
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["rats", "rats_test"]

[tool.ruff.format]
quote-style = "double"            # Like Black, use double quotes for strings.
indent-style = "space"            # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = false # Like Black, respect magic trailing commas.
line-ending = "auto"              # Like Black, automatically detect the appropriate line ending.

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

[tool.coverage.run]
branch = true
data_file = "../.tmp/rats-processors/.coverage"
# Root namespace package folder here ensures coverage will include files with 0% coverage
source = ["src/python/rats"]
relative_files = true

[tool.coverage.report]
show_missing = true

[tool.coverage.xml]
output = "../.tmp/rats-processors/reports/coverage.xml"

[tool.pytest.ini_options]
cache_dir = "../.tmp/rats-processors/.pytest_cache"
testpaths = ["test/python"]
addopts = """
    --cov --cov-report=term
    --cov-report=xml
    --junit-xml ../.tmp/rats-processors/reports/pytest-junit.xml
    --capture=no
    --cache-clear
"""
