name: CI Checks
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  test-components:
    strategy:
      matrix:
        component:
          - oneml-pipelines
          - oneml-processors
          - oneml-habitats
    runs-on: [ "self-hosted", "1ES.Pool=oneml-test-300" ]
    name: "test: ${{ matrix.component }}"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - id: "authenticate"
        name: "authenticate"
        run: |
          # authenticate as the managed identity we assigned to the 1es runner
          az login \
          --identity \
          -u /subscriptions/7bd3802d-452e-4b2a-964e-e2c996bc7477/resourcegroups/immunodata.aks/providers/microsoft.managedidentity/userassignedidentities/k8s-pods-tekton-pipeline
          # auth to acr resources we use
          az acr login --name immunodata
          # generate an access token that we use for the run
          TOKEN=$(az account get-access-token --query accessToken --output tsv --subscription "Immunomics R&D")
          # Prevents the token from being output in logs
          echo "::add-mask::$TOKEN"
          echo "writing access token to $GITHUB_OUTPUT"
          echo access-token=$TOKEN >> $GITHUB_OUTPUT
      - id: "create-build-image"
        name: "create-build-image"
        run: |
          TOKEN="${{ steps.authenticate.outputs.access-token }}"
          # create a secrets file for docker to use
          mkdir -p .tmp
          echo "export POETRY_HTTP_BASIC_IMMUNOMICS_ARTIFACTS_PASSWORD=${TOKEN}" > .tmp/docker-build.env
          # run the docker build by mounting our secrets
          docker build \
            -t immunodata.azurecr.io/oneml/${{ matrix.component }}:local \
            --secret id=build-envs,src=.tmp/docker-build.env \
            -f ${{ matrix.component }}/Dockerfile.build .
      - id: "package-info"
        name: "package-info"
        run: |
          # use poetry to find out the version of our package
          VERSION=$(docker run \
            -w /opt/build/${{ matrix.component }} \
            -v $PWD:/opt/build:ro \
            immunodata.azurecr.io/oneml/${{ matrix.component }}:local \
            poetry version --short)
          PKG_NAME=$(echo "${{ matrix.component }}" | tr '-' '_')
          PKG_NAME=$(echo "${{ matrix.component }}" | tr '-' '_')
          PKG_WHEEL="$PKG_NAME-$VERSION-py3-none-any.whl"
          echo package-version=$VERSION >> $GITHUB_OUTPUT
          echo package-name=$PKG_NAME >> $GITHUB_OUTPUT
          echo package-wheel=$PKG_WHEEL >> $GITHUB_OUTPUT
      - name: flake8
        run: |
          docker run \
            -v $PWD/.tmp:/opt/oneml/.tmp \
            immunodata.azurecr.io/oneml/${{ matrix.component }}:local poetry run flake8
      - name: mypy
        run: |
          docker run \
            -v $PWD/.tmp:/opt/oneml/.tmp \
            immunodata.azurecr.io/oneml/${{ matrix.component }}:local poetry run mypy
      - name: pytest
        run: |
          docker run \
            -v $PWD/.tmp:/opt/oneml/.tmp \
            immunodata.azurecr.io/oneml/${{ matrix.component }}:local poetry run pytest
      - name: "build-wheels"
        run: |
          mkdir -p wheels
          docker run \
            -e POETRY_DYNAMIC_VERSIONING_BYPASS=${{ steps.package-info.outputs.package-version }} \
            -v $PWD/wheels:/opt/oneml/${{ matrix.component }}/dist \
            immunodata.azurecr.io/oneml/${{ matrix.component }}:local poetry build -f wheel
      - name: publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: .tmp/${{ matrix.component }}/reports/pytest-junit.xml
          check_name: "Test Results: ${{ matrix.component }}"
      - name: 'upload-artifacts'
        uses: actions/upload-artifact@v3
        with:
          name: "wheels"
          path: "wheels/${{ steps.package-info.outputs.package-wheel }}"
  push-artifacts:
    if: github.ref != 'refs/heads/main'
    needs: test-components
    runs-on: [ "self-hosted", "1ES.Pool=oneml-test-300" ]
    name: "push-artifacts"
    steps:
      - name: download-wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: wheels
        run: |
          echo "foo bar"
          echo "${{ github.ref }}"
          ls -lah
