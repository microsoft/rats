name: CI
on:
  workflow_dispatch:
    inputs:
      sha:
        description: 'the git sha to checkout'
        required: true
        type: string
      publish-wheels:
        description: 'whether to publish wheels to the artifact repo'
        default: false
        required: true
        type: boolean
      publish-docs:
        description: 'whether to publish docs to the github pages'
        default: false
        required: true
        type: boolean
  workflow_call:
    inputs:
      sha:
        description: 'the git sha to checkout'
        required: true
        type: string
      publish-wheels:
        description: 'whether to publish wheels to the artifact repo'
        default: false
        required: true
        type: boolean
      publish-docs:
        description: 'whether to publish docs to the github pages'
        default: false
        required: true
        type: boolean
jobs:
  test-components:
    strategy:
      fail-fast: false
      matrix:
        component:
          - rats
          - rats-apps
          - rats-devtools
          - rats-pipelines
          - rats-processors
    runs-on: ["self-hosted", "1ES.Pool=oneml.github-runner-pool.dv5"]
    name: "test: ${{ matrix.component }}"
    steps:
      # let us reach things installed by pipx
      - run: echo "${HOME}/.local/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
          fetch-depth: 0
          fetch-tags: true
      - name: install-devtools
        run: |
          pipx install poetry
          pipx inject poetry "poetry-dynamic-versioning[plugin]"
          pipx inject poetry "poetry-monorepo-dependency-plugin"
          pipx install -e rats-devtools/
      - name: "poetry-install"
        run: |
          rats-devtools install ${{ matrix.component }}/
      - id: package-info
        name: package-info
        run: |
          cd ${{ matrix.component }}/
          # use poetry to find out the version of our package
          VERSION=$(poetry version --short)
          echo "detected version: $VERSION"
          PKG_NAME=$(echo "${{ matrix.component }}" | tr '-' '_')
          PKG_WHEEL="$PKG_NAME-$VERSION-py3-none-any.whl"
          echo package-version=$VERSION >> $GITHUB_OUTPUT
          echo package-name=$PKG_NAME >> $GITHUB_OUTPUT
          echo package-wheel=$PKG_WHEEL >> $GITHUB_OUTPUT
      - name: ruff-format
        run: |
          cd ${{ matrix.component }}/
          poetry run ruff format --check src/python/ test/python/
      - name: ruff-check
        run: |
          cd ${{ matrix.component }}/
          poetry run ruff check --no-fix --output-format=github src/python/ test/python/
      - name: pyright
        run: |
          cd ${{ matrix.component }}/
          poetry run pyright
      - name: pytest
        run: |
          cd ${{ matrix.component }}/
          poetry run pytest --cov
      - name: upload-coverage
        uses: codecov/codecov-action@v4.3.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: microsoft/rats
          name: ${{ matrix.component }}
          verbose: true
      - name: build-wheels
        run: |
          cd ${{ matrix.component }}/
          poetry build -f wheel
      - name: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "wheels.${{ matrix.component }}"
          path: "${{ matrix.component }}/dist/${{ steps.package-info.outputs.package-wheel }}"

  publish-pypi-pkg:
    if: "${{ inputs.publish-wheels }}"
    strategy:
      fail-fast: false
      matrix:
        component:
          - rats-apps
          - rats-pipelines
          - rats-processors
    needs: test-components
    runs-on: ["self-hosted", "1ES.Pool=oneml.github-runner-pool.dv5"]
    name: "publish-pypi-pkg"
    environment:
      name: pypi
      url: https://pypi.org/p/${{ matrix.component }}
    permissions:
      id-token: write
    steps:
      - name: download-wheels
        uses: actions/download-artifact@v4
        with:
          name: "wheels.${{ matrix.component }}"
          path: dist/
      - name: publish-wheels
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  build-docs:
    runs-on: ["self-hosted", "1ES.Pool=oneml.github-runner-pool.dv5"]
    name: "build-docs"
    steps:
      # let us reach things installed by pipx
      - run: echo "${HOME}/.local/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
          fetch-depth: 0
          fetch-tags: true
      - name: "install-devtools"
        run: |
          pipx install poetry
          pipx install -e rats-devtools/
      - name: "poetry-install"
        run: |
          # I would like to optimize this soon before these steps become too slow
          rats-devtools install rats-devtools/
          rats-devtools install rats-pipelines/
          rats-devtools install rats-processors/
      - name: "build-docs"
        run: |
          rats-devtools build-api-docs
          rats-devtools mkdocs-build
      - name: "upload-gh-pages"
        uses: actions/upload-pages-artifact@v3
        with:
          path: "rats-devtools/dist/site"
  deploy-docs:
    # temporarily slowing down builds to make sure we avoid deploying docs from a failed build
    needs: ["test-components", "build-docs"]
    # this one can run anywhere
    runs-on: "ubuntu-latest"
    name: "deploy-docs"
    steps:
      - name: "deploy-gh-pages"
        if: "${{ inputs.publish-docs }}"
        id: deployment
        uses: actions/deploy-pages@v4
